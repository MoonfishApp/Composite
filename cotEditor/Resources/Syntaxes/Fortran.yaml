extensions:
- keyString: "f"
- keyString: "f08"
- keyString: "f03"
- keyString: "f95"
- keyString: "f90"
- keyString: "for"
filenames: []
interpreters: []
metadata:
  version: "1.0.0"
  lastModified: "2017-05-06"
  author: "1024jp"
  license: "Same as CotEditor"
  description: "Support from Fortran 90 to Fortran 2008"
  distributionURL: "https://coteditor.com"
commands:
- beginString: "\\babs(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bachar(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bacos(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bacosh(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\badjustl(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\badjustr(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\baimag(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\baint(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\ball(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\ballocated(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\banint(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bany(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\basin(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\basinh(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bassociated(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batan(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batan2(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batanh(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_add(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_and(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_cas(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_define(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_fetch_add(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_fetch_and(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_fetch_or(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_fetch_xor(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_or(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_ref(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\batomic_xor(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbessel_j0(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbessel_jn(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbessel_y0(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbessel_y1(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbessel_yn(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbesselj1(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbge(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbgt(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbit_size(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bble(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bblt(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bbtest(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bc_associated(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bc_f_pointer(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bc_f_procpointer(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bc_funloc(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bc_loc(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bc_sizeof(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bceiling(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bchar(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcmplx(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bco_broadcst(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bco_max(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bco_min(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bco_reduce(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bco_sum(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcommand_argument_count(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcompiler_options(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcompiler_version(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bconjg(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcos(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcosh(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcount(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcpu_time(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcshift(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdate_and_time(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdble(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdigits(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdim(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdot_product(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdprod(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdshiftl(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdshiftr(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\beoshift(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bepsilon(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\berf(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\berfc(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\berfc_scaled(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bevent_query(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bexecute_command_line(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bexp(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bexponent(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bextends_type_of(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bfloat(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bfloor(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bfraction(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bgamma(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bget_command(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bget_command_argument(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bget_environment_variable(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bhuge(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bhypot(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\biachar(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\biall(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\biand(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\biany(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bibclr(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bibits(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bibset(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bichar(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bieor(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bimage_index(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bindex(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bint(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bior(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\biparity(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bis_iostat_end(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bis_iostat_eor(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bishft(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bishftc(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bkind(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blbound(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blcobound(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bleadz(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blen(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blen_trim(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blge(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blgt(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blle(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bllt(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blog(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blog10(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blog_gamma(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blogical(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmaskl(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmaskr(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmatmul(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmax(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmaxexponent(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmaxloc(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmaxval(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmerge(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmerge_bits(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmin(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bminexponent(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bminloc(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bminval(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmod(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmodulo(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmove_alloc(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bmvbits(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bnearest(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bnew_line(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bnint(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bnorm2(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bnot(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bnull(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bnum_images(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bpack(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bparity(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bpopcnt(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bpoppar(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bprecision(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bpresent(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bproduct(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bradix(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\brandom_number(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\brandom_seed(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\brange(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\brank(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\breal(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\brepeat(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\breshape(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\brrspacing(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsame_type_as(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bscale(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bscan(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bselected_char_kind(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bselected_int_kind(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bselected_real_kind(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bset_exponent(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bshape(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bshifta(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bshiftl(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bshiftr(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsign(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsin(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsinh(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsize(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsngl(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bspacing(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bspread(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsqrt(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bstorage_size(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsum(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bsystem_clock(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\btan(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\btanh(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bthis_image(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\btiny(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\btrailz(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\btransfer(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\btranspose(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\btrim(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bubound(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bucobound(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bunpack(?=\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bverify(?=\\()"
  ignoreCase: true
  regularExpression: true
keywords:
- beginString: ".AND."
  ignoreCase: true
- beginString: ".EQ."
  ignoreCase: true
- beginString: ".GE."
  ignoreCase: true
- beginString: ".GT."
  ignoreCase: true
- beginString: ".LE."
  ignoreCase: true
- beginString: ".LT."
  ignoreCase: true
- beginString: ".NE."
  ignoreCase: true
- beginString: ".OR."
  ignoreCase: true
- beginString: "\\bsync (all|images|memory)\\b"
  ignoreCase: true
  regularExpression: true
- beginString: "abstract"
  ignoreCase: true
- beginString: "allocatable"
  ignoreCase: true
- beginString: "allocate"
  ignoreCase: true
- beginString: "assign"
  ignoreCase: true
- beginString: "associate"
  ignoreCase: true
- beginString: "asynchronous"
  ignoreCase: true
- beginString: "backspace"
  ignoreCase: true
- beginString: "bind"
  ignoreCase: true
- beginString: "block"
  ignoreCase: true
- beginString: "call"
  ignoreCase: true
- beginString: "case"
  ignoreCase: true
- beginString: "class"
  ignoreCase: true
- beginString: "close"
  ignoreCase: true
- beginString: "codimension"
  ignoreCase: true
- beginString: "common"
  ignoreCase: true
- beginString: "contains"
  ignoreCase: true
- beginString: "contiguous"
  ignoreCase: true
- beginString: "continue"
  ignoreCase: true
- beginString: "critical"
  ignoreCase: true
- beginString: "cycle"
  ignoreCase: true
- beginString: "data"
  ignoreCase: true
- beginString: "deallocate"
  ignoreCase: true
- beginString: "deferred"
  ignoreCase: true
- beginString: "dimension"
  ignoreCase: true
- beginString: "do"
  ignoreCase: true
- beginString: "do concurrent"
  ignoreCase: true
- beginString: "elemental"
  ignoreCase: true
- beginString: "else"
  ignoreCase: true
- beginString: "elsewhere"
  ignoreCase: true
- beginString: "end"
  ignoreCase: true
- beginString: "endfile"
  ignoreCase: true
- beginString: "endif"
  ignoreCase: true
- beginString: "entry"
  ignoreCase: true
- beginString: "enum"
  ignoreCase: true
- beginString: "enumerator"
  ignoreCase: true
- beginString: "equivalence"
  ignoreCase: true
- beginString: "error"
  ignoreCase: true
- beginString: "exit"
  ignoreCase: true
- beginString: "extends"
  ignoreCase: true
- beginString: "external"
  ignoreCase: true
- beginString: "final"
  ignoreCase: true
- beginString: "flush"
  ignoreCase: true
- beginString: "forall"
  ignoreCase: true
- beginString: "format"
  ignoreCase: true
- beginString: "function"
  ignoreCase: true
- beginString: "generic"
  ignoreCase: true
- beginString: "goto"
  ignoreCase: true
- beginString: "if"
  ignoreCase: true
- beginString: "implicit"
  ignoreCase: true
- beginString: "import"
  ignoreCase: true
- beginString: "include"
  ignoreCase: true
- beginString: "inquire"
  ignoreCase: true
- beginString: "intent"
  ignoreCase: true
- beginString: "interface"
  ignoreCase: true
- beginString: "intrinsic"
  ignoreCase: true
- beginString: "lock"
  ignoreCase: true
- beginString: "module"
  ignoreCase: true
- beginString: "namelist"
  ignoreCase: true
- beginString: "non_overridable"
  ignoreCase: true
- beginString: "nopass"
  ignoreCase: true
- beginString: "nullify"
  ignoreCase: true
- beginString: "only"
  ignoreCase: true
- beginString: "open"
  ignoreCase: true
- beginString: "operator"
  ignoreCase: true
- beginString: "optional"
  ignoreCase: true
- beginString: "parameter"
  ignoreCase: true
- beginString: "pass"
  ignoreCase: true
- beginString: "pause"
  ignoreCase: true
- beginString: "pointer"
  ignoreCase: true
- beginString: "print"
  ignoreCase: true
- beginString: "private"
  ignoreCase: true
- beginString: "procedure"
  ignoreCase: true
- beginString: "program"
  ignoreCase: true
- beginString: "protected"
  ignoreCase: true
- beginString: "public"
  ignoreCase: true
- beginString: "pure"
  ignoreCase: true
- beginString: "read"
  ignoreCase: true
- beginString: "recursive"
  ignoreCase: true
- beginString: "result"
  ignoreCase: true
- beginString: "return"
  ignoreCase: true
- beginString: "rewind"
  ignoreCase: true
- beginString: "rewrite"
  ignoreCase: true
- beginString: "save"
  ignoreCase: true
- beginString: "select"
  ignoreCase: true
- beginString: "sequence"
  ignoreCase: true
- beginString: "stop"
  ignoreCase: true
- beginString: "submodule"
  ignoreCase: true
- beginString: "subroutine"
  ignoreCase: true
- beginString: "target"
  ignoreCase: true
- beginString: "then"
  ignoreCase: true
- beginString: "unlock"
  ignoreCase: true
- beginString: "use"
  ignoreCase: true
- beginString: "value"
  ignoreCase: true
- beginString: "volatile"
  ignoreCase: true
- beginString: "wait"
  ignoreCase: true
- beginString: "where"
  ignoreCase: true
- beginString: "while"
  ignoreCase: true
- beginString: "write"
  ignoreCase: true
values: []
types:
- beginString: "\\bcharacter\\b(?!\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bcomplex\\b(?!\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdata\\b(?!\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bdouble precision\\b"
  ignoreCase: true
  regularExpression: true
- beginString: "\\binteger\\b(?!\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\blogical\\b(?!\\()"
  ignoreCase: true
  regularExpression: true
- beginString: "\\breal\\b(?!\\()"
  ignoreCase: true
  regularExpression: true
numbers:
- ignoreCase: true
  beginString: "\\.false\\.(_[a-z0-9_]+)?"
  regularExpression: true
- beginString: "\\.true\\.(_[a-z0-9_]+)?"
  ignoreCase: true
  regularExpression: true
- regularExpression: true
  beginString: "\\b[0-7]+b\\b"
  ignoreCase: true
  description: "oct"
- beginString: "\\b[0-9]+(\\.[0-9]*)?(e[-+]?[0-9]+)?(_[a-z0-9_]+)?\\b"
  ignoreCase: true
  regularExpression: true
- beginString: "\\bo'[0-7]+'"
  regularExpression: true
  ignoreCase: true
  description: "oct"
- beginString: "\\bz'[0-9a-f]+'"
  regularExpression: true
  ignoreCase: true
  description: "hex"
attributes: []
variables: []
characters: []
comments:
- beginString: "^\\*.+"
  regularExpression: true
- beginString: "^C\\b.+"
  regularExpression: true
strings:
- beginString: "\""
  endString: "\""
- beginString: "'"
  endString: "'"
outlineMenu:
- beginString: "^[\\t ]*(elemental )?(pure )?([a-z]+ )?function[\\t ]+[a-z][a-z0-9_]*\\([^)]*\\)"
  ignoreCase: true
- beginString: "^[\\t ]*(elemental )?(pure )?subroutine[\\t ]+[a-z].*"
  ignoreCase: true
- beginString: "^[\\t ]*module[\\t ]+[a-z].*"
  bold: true
  ignoreCase: true
- beginString: "^[\\t ]*program[\\t ]+[a-z].*"
  bold: false
  ignoreCase: true
  underline: true
completions: []
commentDelimiters:
  inlineDelimiter: "!"
